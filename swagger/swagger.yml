openapi: "3.0.3"
info:
  title: Bambú Bank Collection API
  version: "1.0"
servers:
  - url: http://localhost:3001
paths:
  /login/:
    post:
      summary: "Iniciar Sesión."
      description: "Permite a los Usuarios Acceder al Sistema."
      tags:
        - Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "Joaquín Reyes"
                password:
                  type: string
                  format: password
                  example: "31032002"
      responses:
        200:
          description: "Inicio de Sesión Correcto."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Inicio de Sesión Correcto"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user_id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: "David Cruz"
                  isSupervisor:
                    type: boolean
                    example: true
        400:
          description: "Por Favor, Introduzca un Usuario y una Contraseña."
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /logout/{id}/:
    get:
      summary: "Cierre de Sesión."
      description: "Cierra la Sesión de un Usuario Autenticado."
      tags:
        - Login
      parameters:
        - name: id
          in: path
          required: true
          description: "Id del Usuario que Cierra su Sesión."
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Cierre de Sesión Correcto.
        500:
          $ref: "#/components/responses/InternalError"

  /get-latest-collector-and-collector-payment-data/:
    get:
      summary: "Obtener los Datos Más Recientes Sobre Colectors, Transacciones y Aprobaciones."
      description: "Muestra un Dashboard con la Información General de los Movimientos Transaccionales Realizados."
      tags:
        - Dashboard
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: object
                properties:
                  collector:
                    type: string
                    example: "Movistar"
                  most_recent_collector:
                    type: string
                    example: "CLESA"
                  payed_service:
                    type: string
                    example: "Intenet Residencial de 15MB"
                  amount:
                    type: number
                    example: 21.10
                  latest_approved_transaction:
                    type: string
                    example: "TSC00000234"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /transactions-by-dates/{startDay}/{endDay}/{amountFilter}/{transactionTypeFilter}/:
    get:
      summary: "Obtener Todas las Transacciones Realizadas."
      description: "Muestra una lista de Transacciones Realizadas entre dos Días y Filtradas por Monto y Tipo de Transacción."
      tags:
        - Dashboard
      parameters:
        - name: startDay
          in: path
          required: true
          description: "Día Inicial de la Busqueda."
          schema:
            type: string
            format: date
            example: "2025-01-12"
        - name: endDay
          in: path
          required: true
          description: "Día Final de la Busqueda."
          schema:
            type: string
            format: date
            example: "2025-02-12"
        - name: amountFilter
          in: path
          required: true
          description: "Rango de Montos de las Transacciones a Filtrar."
          schema:
            type: integer
            example: 1
        - name: transactionTypeFilter
          in: path
          required: true
          description: "Tipo de Transacción a Filtrar."
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: object
                properties:
                  label:
                    type: string
                    example: "12/01/2025 - 12/02/2025"
                  totalAmount:
                    type: number
                    example: 463
                  transactionsCounter:
                    type: integer
                    example: 16
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /approval-and-rejection-rates/{startDay}/{endDay}/:
    get:
      summary: "Obtener Todas las Tasas de Aprobación y Rechazo de Transacciones."
      description: "Muestra una Lista de las Tasas de Aprobación y Rechazo Basado en Rangos de Tiempo."
      tags:
        - Dashboard
      parameters:
        - name: startDay
          in: path
          required: true
          description: "Día Inicial de la Búsqueda."
          schema:
            type: string
            format: date
            example: "2025-01-12"
        - name: endDay
          in: path
          required: true
          description: "Día Final de la Búsqueda."
          schema:
            type: string
            format: date
            example: "2025-02-12"
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: object
                properties:
                  transaction_type:
                    type: string
                    example: "Aprobadas"
                  total_transactions:
                    type: integer
                    example: 177
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /processed-amount-by-transactions-and-collectors-payments/{startDay}/{endDay}/:
    get:
      summary: "Obtener el Total Procesado por Cada Tipo de Transacción."
      description: "Muestra una Lista con los Tipos de Transacciones y los Pagos a Colectores y los Montos Totales procesados por Cada Uno."
      tags:
        - Dashboard
      parameters:
        - name: startDay
          in: path
          required: true
          description: "Día Inicial de la Búsqueda."
          schema:
            type: string
            format: date
            example: "2025-01-12"
        - name: endDay
          in: path
          required: true
          description: "Día Final de la Búsqueda."
          schema:
            type: string
            format: date
            example: "2025-02-12"
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: object
                properties:
                  transaction_type:
                    type: string
                    example: Deposito
                  transaction_amount:
                    type: number
                    example: 135170.50
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /customers-with-the-most-money-paid/:
    get:
      summary: "Obtener a los 5 Clientes con el Monto Más Grande Pagado."
      description: "Muestra una Lista con los 5 Clientes con Los Montos Más Grandes Pagados por Cada Uno."
      tags:
        - Dashboard
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: object
                properties:
                  customer:
                    type: string
                    example: "David Cruz"
                  amount:
                    type: number
                    example: 645.97
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /payments-by-collector/:
    get:
      summary: "Obtener Todos los Pagos Realizados a Colectores."
      description: "Muestra una Lista de los Colectores y la Cantidad de Pagos que ha Recibido Cada Uno."
      tags:
        - Dashboard
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: object
                properties:
                  collector:
                    type: string
                    example: "TIGO"
                  transactionsByCollector:
                    type: integer
                    example: 41
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /payments-by-collector-denominations/:
    get:
      summary: "Obtener Todos los Pagos Realizados a Colectores y Dividirlo en Diferentes Denominaciones."
      description: "Muestra una Lista con las Denominaciones y en que Cantidades Conforman el Total Procesado por Pagos a Colectores."
      tags:
        - Dashboard
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: object
                properties:
                  denomination:
                    type: string
                    example: "Billetes de $100"
                  total:
                    type: integer
                    example: 2
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /reports-by-date/:
    get:
      summary: "Obtener los Datos para Generar Reportes."
      description: "Muestra una Lista con los Datos necesarios para generar Reportes Basados en Rangos de Tiempo."
      tags:
        - Dashboard
      parameters:
        - name: startDay
          in: path
          required: true
          description: "Día Inicial de la Búsqueda."
          schema:
            type: string
            format: date
            example: "2025-01-12"
        - name: endDay
          in: path
          required: true
          description: "Día Final de la Búsqueda."
          schema:
            type: string
            format: date
            example: "2025-02-12"
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    type: object
                    oneOf:
                      - properties:
                          sender:
                            type: string
                            example: "Ricardo Torres"
                          sender_account:
                            type: string
                            example: "**** **** **** 9010"
                          receiver:
                            type: string
                            example: "Ricardo Torres"
                          receiver_account:
                            type: string
                            nullable: true
                            example: null
                          amount:
                            type: number
                            example: 120.00
                          transaction_type:
                            type: string
                            example: "Deposito"
                          status:
                            type: string
                            example: "Aprobada"
                          authorized_by:
                            type: string
                            example: "David Cruz"
                          datetime:
                            type: string
                            example: "2025-02-12T18:21:27.000Z"
                      - properties:
                          transaction_type:
                            type: string
                            example: "Retiro"
                          amount:
                            type: number
                            example: 1882536.00
                      - properties:
                          collector:
                            type: string
                            example: "TIGO"
                          amount:
                            type: number
                            example: 1052.31
                      - properties:
                          collector:
                            type: string
                            example: "CLARO"
                          service_name:
                            type: string
                            example: "Telefonía Fija"
                          amount:
                            type: number
                            example: 710.96
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"

  /customers/:
    get:
      summary: "Obtener los Datos de los Clientes."
      description: "Muestra una Lista con los Datos de los Clientes."
      tags:
        - Customers
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: integer
                      example: 1
                    customer_id:
                      type: string
                      example: "1"
                    name:
                      type: string
                      example: "David Cruz"
                    identity_doc:
                      type: string
                      example: "0000000-1"
                    email:
                      type: string
                      example: "david.cruz@example.com"
                    deleted_at:
                      type: string
                      example: null
        500:
          $ref: "#/components/responses/InternalError"
  /update-customer/{id}/:
    put:
      summary: "Actualizar los Datos de los Clientes."
      description: "Actualiza los Datos de un Cliente Específico."
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          required: true
          description: "Id del Cliente a Actualizar."
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: "Datos del Cliente Actualizados con Éxito."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Datos del Cliente Actualizados con Éxito"
        400:
          description: "Por Favor, Rellene Todos los Campos."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Por Favor, Rellene Todos los campos"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        409:
          description: "El Email ya Está en uso Por Otro Cliente."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "El Email ya Está en uso Por Otro Cliente"
        500:
          $ref: "#/components/responses/InternalError"
  /delete-customer/{id}/:
    delete:
      summary: "Eliminar los Datos de los Clientes."
      description: "Actualiza el campo deleted_at de un Cliente Específico Realizando así un Borrado Lógico."
      tags:
        - Customers
      parameters:
        - name: id
          in: path
          required: true
          description: "Id del Cliente a Eliminar."
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: "Cliente Eliminado con Éxito."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Cliente Eliminado con Éxito
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /search-customer/{name}/{identity_doc}/:
    get:
      summary: "Buscar Cliente por Nombre y/o por Número de Documento de Identidad."
      description: "Muestra los Datos de un Cliente por Nombre y/o por Número de Documento de Identidad."
      tags:
        - Customers
      parameters:
        - name: name
          in: query
          required: false
          description: "Nombre del Cliente a Buscar."
          schema:
            type: string
            example: "David Cruz"
        - name: identity_doc
          in: query
          required: false
          description: "Número de Documento de Identidad del Cliente a Buscar."
          schema:
            type: string
            example: "0000001-1"
      responses:
        200:
          description: "Cliente Encontrado."
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: integer
                      example: 1
                    customer_id:
                      type: string
                      example: "1"
                    name:
                      type: string
                      example: "David Cruz"
                    identity_doc:
                      type: string
                      example: "0000001-1"
                    email:
                      type: string
                      example: "david.cruz@example.com"
                    deleted_at:
                      type: string
                      example: null
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          $ref: "#/components/responses/NotFoundError"
        500:
          $ref: "#/components/responses/InternalError"

  /accounts/:
    get:
      summary: "Obtener las Cuentas de los Clientes."
      description: "Muestra una Lista con las Cuentas de los Clientes."
      tags:
        - Accounts
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    account_number:
                      type: string
                      example: "0000 1234 5678 9000"
                    owner:
                      type: string
                      example: "David Cruz"
                    balance:
                      type: number
                      example: 24875.00
                    datetime:
                      type: string
                      example: "2025-01-30T06:00:00.000Z"
        401:
          $ref: "#/components/responses/NotFoundError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /accounts-by-customer/{id}/:
    get:
      summary: "Obtener las Cuentas de un Cliente."
      description: "Muestra una Lista con las Cuentas de un Cliente en Específico."
      tags:
        - Accounts
      parameters:
        - name: id
          in: path
          required: true
          description: "Id del Cliente."
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    account_number:
                      type: string
                      example: "0000 1234 5678 9000"
                    owner:
                      type: string
                      example: "David Cruz"
                    balance:
                      type: number
                      example: 34875.00
                    datetime:
                      type: string
                      example: "2025-01-30T06:00:00.000Z"
        401:
          $ref: "#/components/responses/NotFoundError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"

  /collectors/:
    get:
      summary: "Obtener la Lista de Todos los Colectores."
      description: "Muestra una Lista con los Colectores que No han Sido Eliminados."
      tags:
        - Collectors
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: integer
                      example: 4
                    collector:
                      type: string
                      example: "ANDA"
                    description:
                      type: string
                      example: "Administración Nacional de Acueductos y Alcantarillados"
                    services_names:
                      type: string
                      example: "Agua Potable"
        401:
          $ref: "#/components/responses/NotFoundError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /save-collector/:
    post:
      summary: "Guardar un Nuevo Collector."
      description: "Crea un Nuevo Collector en la Base de Datos."
      tags:
        - Collectors
      responses:
        200:
          description: "Datos Registrados Exitosamente."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Collector Registrado con Éxito
        400:
          $ref: "#/components/responses/BadRequestErrorByEmptyFields"
        401:
          $ref: "#/components/responses/NotFoundError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /view-payments-collector-details/{id}/{startDay}/{endDay}/:
    get:
      summary: "Obtener los Pagos Recibidos por Cada Colector."
      description: "Muestra los Pagos Recibidos de un Colector Específico en un Rango de Días Específicos."
      tags:
        - Collectors
      parameters:
        - name: id
          in: path
          required: true
          description: "Id del Colector."
          schema:
            type: integer
            example: 4
        - name: startDay
          in: path
          required: true
          description: "Día Inicial para el Rango de Días."
          schema:
            type: string
            example: "2025-01-13"
        - name: endDay
          in: path
          required: true
          description: "Día Final para el Rango de Días."
          schema:
            type: string
            example: "2025-02-13"
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: integer
                      example: 216
                    collector:
                      type: string
                      example: "ANDA"
                    service:
                      type: string
                      example: "Agua Potable"
                    amount:
                      type: number
                      example: 15.00
                    payed_by:
                      type: string
                      example: "Luis Mendez"
                    registered_by:
                      type: string
                      example: "David Cruz"
                    datetime:
                      type: string
                      example: "2025-02-11T02:22:13.000Z"
        401:
          $ref: "#/components/responses/NotFoundError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /update-collector/{id}/:
    put:
      summary: "Actualizar un Collector."
      description: "Actualiza los Datos de un Collector en la Base de Datos."
      tags:
        - Collectors
      parameters:
        - name: id
          in: path
          required: true
          description: "Id del Collector a Actualizar."
          schema:
            type: integer
            example: 4
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                collector:
                  type: string
                  example: "ANDA Actualizado"
                description:
                  type: string
                  example: "Administración Nacional de Acueductos y Alcantarillados Actualizado"
      responses:
        200:
          description: "Datos Actualizados Exitosamente."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Datos del Colector Actualizados con Éxito
        400:
          $ref: "#/components/responses/BadRequestErrorByEmptyFields"
        401:
          $ref: "#/components/responses/NotFoundError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        409:
          description: "Colector Duplicado."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Este Colector ya Está Registrado"
        500:
          $ref: "#/components/responses/InternalError"
  /delete-collector/{id}/:
    delete:
      summary: "Eliminar los Datos de un Collector."
      description: "Actualiza el campo deleted_at de un Colector Específico Realizando así un Borrado Lógico."
      tags:
        - Collectors
      parameters:
        - name: id
          in: path
          required: true
          description: "Id del Collector a Eliminar."
          schema:
            type: integer
            example: 4
      responses:
        200:
          description: "Datos Eliminados Exitosamente."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Colector Eliminado con Éxito
        401:
          $ref: "#/components/responses/NotFoundError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /search-collector/{collector}/:
    get:
      summary: "Buscar Colector por Nombre."
      description: "Muestra los Datos de un Colector Basado en su Nombre."
      tags:
        - Collectors
      parameters:
        - name: collector
          in: query
          required: true
          description: "Nombre del Colector a Buscar."
          schema:
            type: string
            example: "ANDA"
      responses:
        200:
          description: "Colector Encontrado."
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: integer
                      example: 4
                    collector:
                      type: string
                      example: "ANDA"
                    description:
                      type: string
                      example: "Administración Nacional de Acueductos y Alcantarillados"
                    services_names:
                      type: string
                      example: "Agua Potable"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/NotFoundError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"

  /services/:
    get:
      summary: "Obtener la lista de Servicios de todos los Colectores."
      description: "Muestra la lista de Servicios de todos los Colectores en la Base de Datos que No han Sido Eliminados."
      tags:
        - Services
      responses:
        200:
          description: "Servicios Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: integer
                      example: 4
                    service:
                      type: string
                      example: "Agua Potable"
                    collector:
                      type: string
                      example: "ANDA"
                    description:
                      type: string
                      example: "Servicio de Agua Potable"
                    price:
                      type: number
                      example: 0.00
                    deleted_at:
                      type: string
                      nullable: true
                      example: null
        401:
          $ref: "#/components/responses/NotFoundError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /save-service/:
    post:
      summary: "Guardar Uno o Más Servicios."
      description: "Registra Uno o Más Servicios para un Colector Específico."
      tags:
        - Services
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                collector:
                  type: integer
                  example: 1
                services:
                  type: array
                  items:
                    type: object
                    properties:
                      services:
                        type: string
                        example: "Internet Residencial de 150 MB"
      responses:
        200:
          description: "Servicios Guardados Exitosamente."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Servicio(s) Registrado(s) con Éxito"
        400:
          description: "Colector No Seleccionado o No Servicios Introducidos."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Por Favor, Seleccione un Colector y Rellene Todos los Campos"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        409:
          description: "Servicio Duplicado para un Colector Específico."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Los Siguientes Servicios ya Están Registrados Para este Colector: TIGO"
        500:
          $ref: "#/components/responses/InternalError"
  /view-payments-by-service-details/{id}/{startDay}/{endDay}/:
    get:
      summary: "Obtener los Pagos Recibidos por Cada Servicio."
      description: "Muestra los Pagos Recibidos de un Servicio Específico en un Rango de Días Específicos."
      tags:
        - Services
      parameters:
        - name: id
          in: path
          required: true
          description: "Id del Servicio."
          schema:
            type: integer
            example: 1
        - name: startDay
          in: path
          required: true
          description: "Día Inicial para el Rango de Días."
          schema:
            type: string
            example: "2025-01-12"
        - name: endDay
          in: path
          required: true
          description: "Día Final para el Rango de Días."
          schema:
            type: string
            example: "2025-02-12"
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    service:
                      type: string
                      example: "Internet Residencial de 150MB"
                    collector:
                      type: string
                      example: "TIGO"
                    amount:
                      type: number
                      example: 27.99
                    payed_by:
                      type: string
                      example: "Marina Silva"
                    registered_by:
                      type: string
                      example: "David Cruz"
                    datetime:
                      type: string
                      example: "2025-02-09T01:40:44.000Z"
        401:
          $ref: "#/components/responses/NotFoundError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /update-service/{id}/:
    put:
      summary: "Actualizar un Servicio de un Colector."
      description: "Actualiza los Datos de un Servicio de un Colector en la Base de Datos."
      tags:
        - Services
      parameters:
        - name: id
          in: path
          required: true
          description: "Id del Servicio a Actualizar."
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: "Servicio Actualizado Exitosamente."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Datos del Servicio Actualizados con Éxito"
        400:
          $ref: "#/components/responses/BadRequestErrorByEmptyFields"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        409:
          description: "Servicio Duplicado."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Este Servicio ya Está Registrado para El Colector Seleccionado"
        500:
          $ref: "#/components/responses/InternalError"
  /delete-service/{id}/:
    delete:
      summary: "Elimina los Datos de un Servicio de un Colector."
      description: "Actualiza el campo deleted_at de un Colector Específico Realizando así un Borrado Lógico."
      tags:
        - Services
      parameters:
        - name: id
          in: path
          required: true
          description: "Id del Servicio a Eliminar."
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: "Servicio Eliminado Exitosamente."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Servicio Eliminado con Éxito"
        400:
          $ref: "#/components/responses/BadRequestErrorByEmptyFields"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /search-service/{collector}/{service}/:
    get:
      summary: "Buscar Servicios por Colector y/o Servicio."
      description: "Muestra los Servicios de un Colector Específico o Todos los Servicios si No se Especifica el Colector."
      tags:
        - Services
      parameters:
        - name: collector
          in: query
          required: false
          description: "Id del Colector."
          schema:
            type: integer
            example: 1
        - name: service
          in: query
          required: false
          description: "Nombre del Servicio."
          schema:
            type: string
            example: "Internet Residencial de 150MB"
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: integer
                      example: 1
                    sevice_id:
                      type: string
                      example: "SRV000001"
                    collector_id:
                      type: integer
                      example: "1"
                    service:
                      type: string
                      example: "Internet Residencial de 150MB"
                    description:
                      type: string
                      example: "Servicio de Internet Residencial de 150MB"
                    price:
                      type: number
                      example: 27.99
                    deleted_at:
                      type: string
                      nullable: true
                      example: null
                    collector:
                      type: string
                      example: "TIGO"
        400:
          $ref: "#/components/responses/BadRequestError"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"

  /payments-collectors/:
    get:
      summary: "Obtener la Lista de Todos los Pagos a Colectores."
      description: "Muestra todos los Pagos a Colectores en la Base de Datos."
      tags:
        - Payments Collectors
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    payment_id:
                      type: string
                      example: "PAY000001"
                    customer:
                      type: string
                      example: José Fernández
                    collector:
                      type: string
                      example: "Movistar"
                    service:
                      type: string
                      example: "Internet Residencial de 100MB"
                    amount:
                      type: number
                      example: 24.99
                    registered_by:
                      type: string
                      example: "David Cruz"
                    datetime:
                      type: string
                      example: "2025-02-14T04:45:15.000Z"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /total-payments-amount/:
    get:
      summary: "Obtener el Total de Pagos Realizados."
      description: "Muestra el Total de Pagos Realizados a Colectores en la Base de Datos."
      tags:
        - Payments Collectors
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    amount:
                      type: number
                      example: 5647.65
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /payments-by-collector/{id}/{startDay}/{endDay}:
    get:
      summary: "Obtener los Pagos Realizados a un Colector en un Rango de Tiempo."
      description: "Muestra los Pagos Realizados a un Colector Específico en un Rango de Tiempo Específico."
      tags:
        - Payments Collectors
      parameters:
        - name: collector
          in: path
          required: true
          description: "Id del Colector."
          schema:
            type: integer
            example: 1
        - name: startDay
          in: path
          required: true
          description: "Fecha Inicial de la Búsqueda."
          schema:
            type: string
            example: "2025-01-14"
        - name: endDay
          in: path
          required: true
          description: "Fecha Final de la Búsqueda."
          schema:
            type: string
            example: "2025-02-14"
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    collector:
                      type: string
                      example: "TIGO"
                    amount:
                      type: number
                      example: 1052.31
                    percentage:
                      type: number
                      example: 18.632706
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /save-new-payment:
    post:
      summary: "Registar un Nuevo Pago de Servicio a Colector."
      description: "Registra un Nuevo Pago para un Servicio de un Colector."
      tags:
        - Payments Collectors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                customer_id:
                  type: integer
                  example: 5
                collector_id:
                  type: integer
                  example: 1
                service_id:
                  type: integer
                  example: 2
                amount:
                  type: number
                  example: 15.99
      responses:
        200:
          description: "Pago Registrado Exitosamente."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Pago Registrado con Éxito"
        400:
          $ref: "#/components/responses/BadRequestErrorByEmptyFields"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /search-payments-collectors/{collector}:
    get:
      summary: "Buscar Pagos por Nombre de Colector."
      description: "Muestra los Pagos Realizados a un Colector Específico."
      tags:
        - Payments Collectors
      parameters:
        - name: collector
          in: query
          required: false
          description: "Nombre del Colector."
          schema:
            type: string
            example: "TIGO"
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    payment_id:
                      type: string
                      example: "PAY00000215"
                    customer:
                      type: string
                      example: "David Cruz"
                    collector:
                      type: string
                      example: "TIGO"
                    service:
                      type: string
                      example: "Internet Residencial de 200MB"
                    amount:
                      type: number
                      example: 32.99
                    registered_by:
                      type: string
                      example: "David Cruz"
                    datetime:
                      type: string
                      example: "2025-02-11T01:43:13.000Z"

  /transactions/:
    get:
      summary: "Obtener la Lista de Movimientos Transaccionales Realizados por los Clientes."
      description: "Muestra todos los Movimientos Transaccionales Realizados por los Clientes en la Base de Datos."
      tags:
        - Transactions
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: string
                      example: "TSC00000267"
                    customer:
                      type: string
                      example: "Pablo Castillo"
                    sender_account:
                      type: string
                      example: "**** **** **** 9020"
                    receiver:
                      type: string
                      example: "Juan Perez"
                    receiver_account:
                      type: string
                      example: "**** **** **** 9022"
                    amount:
                      type: number
                      example: 123.00
                    concept:
                      type: string
                      nullable: true
                      example: null
                    status:
                      type: integer
                      example: 2
                    datetime:
                      type: string
                      example: "2025-02-14T07:34:51.000Z"
                    realized_by:
                      type: string
                      example: "David Cruz"
                    authorized_by:
                      type: string
                      example: "David Cruz"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /transactions-by-customer/{id}/account/{account}/{startDay}/{endDay}/:
    get:
      summary: "Obtener las Transacciones de una Cuenta Específica de un Cliente Específico en un Rango de Tiempo."
      description: "Muestra las Transacciones Realizadas a una Cuenta Específica de un Cliente Específico en un Rango de Tiempo Específico."
      tags:
        - Transactions
      parameters:
        - name: id
          in: path
          required: true
          description: "Id del Cliente."
          schema:
            type: integer
            example: 1
        - name: account
          in: path
          required: true
          description: "Número de Cuenta del Cliente Seleccionado."
          schema:
            type: string
            example: "0000 1234 5678 9000"
        - name: startDay
          in: path
          required: true
          description: "Fecha Inicial de la Búsqueda."
          schema:
            type: string
            example: "2025-01-14"
        - name: endDay
          in: path
          required: true
          description: "Fecha Final de la Búsqueda."
          schema:
            type: string
            example: "2025-02-14"
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: integer
                      example: 263
                    transaction_id:
                      type: string
                      example: "TSC00000263"
                    customer:
                      type: string
                      example: "David Cruz"
                    receiver:
                      type: string
                      example: "Ana Gomez"
                    transaction_type:
                      type: string
                      example: "Transferencia"
                    sender_account:
                      type: string
                      example: "**** **** **** 9000"
                    amount:
                      type: number
                      example: 45.00
                    receiver_account:
                      type: string
                      example: "**** **** **** 9001"
                    datetime:
                      type: string
                      example: "2025-02-14T05:29:34.000Z"
                    authorized_by:
                      type: string
                      example: "Joaquín Reyes"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /save-new-transaction/:
    post:
      summary: "Guardar una Nueva Transacción."
      description: "Registra una Nueva Transacción, ya sea un Deposito, Retiro o Transferencia."
      tags:
        - Transactions
      parameters:
        - name: user_id
          in: header
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                customer:
                  type: integer
                  example: 1
                transaction_type:
                  type: integer
                  example: 1
                sender_account_number:
                  type: string
                  example: "0000 1234 5678 9000"
                receiver_account_number:
                  type: string
                  nullable: true
                  example: null
                amount:
                  type: number
                  example: 123.00
                concept:
                  type: string
                  nullable: true
                  example: null
      responses:
        200:
          description: "Transacción Registrada Exitosamente."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Transacción Registrada con Éxito"
        400:
          $ref: "#/components/responses/BadRequestErrorByEmptyFields"
        401:
          $ref: "#/components/responses/NotFoundError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /search-transactions-by/{transaction_id}/{realized_by}/{transaction_type}/{date}:
    get:
      summary: "Buscar Transacciones por su Código o Cajero o Tipo de Transacción y Fecha."
      description: "Muestra las Transacciones que coincidan con Alguno de los Criterios de Búsqueda Introducidos."
      tags:
        - Transactions
      parameters:
        - name: transaction_id
          in: query
          description: "Código de la Transacción."
          schema:
            type: string
            example: "TSC00000267"
        - name: realized_by
          in: query
          description: "Cajero que Realizó la Transacción."
          schema:
            type: string
            example: "David Cruz"
        - name: transaction_type
          in: query
          description: "Tipo de Transacción."
          schema:
            type: integer
            example: 3
        - name: date
          in: query
          description: "Fecha de la Transacción."
          schema:
            type: string
            example: "2025-02-14"
      responses:
        200:
          description: "Datos Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: string
                      example: "TSC00000267"
                    customer:
                      type: string
                      example: "Pablo Castillo"
                    sender_account:
                      type: string
                      example: "**** **** **** 9020"
                    receiver:
                      type: string
                      example: "Juan Perez"
                    receiver_account:
                      type: string
                      example: "**** **** **** 9022"
                    amount:
                      type: number
                      example: 123.00
                    concept:
                      type: string
                      nullable: true
                      example: null
                    status:
                      type: integer
                      example: 2
                    datetime:
                      type: string
                      example: "2025-02-14T07:34:51.000Z"
                    realized_by:
                      type: string
                      example: "David Cruz"
                    authorized_by:
                      type: string
                      example: "David Cruz"
        400:
          $ref: "#/components/responses/BadRequestErrorByEmptyFields"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /user-by-pin/{pin}:
    get:
      summary: "Obtener el Pin de Autorización de un Usuario Supervisor."
      description: "Muestra el Pin de Autorización de un Usuario Supervisor para la Aprobación de una Transacción."
      tags:
        - Transactions
      parameters:
        - name: pin
          in: path
          required: true
          description: "Pin del Usuario."
          schema:
            type: string
            example: "22032002"
      responses:
        200:
          description: "Pin Obtenido Exitosamente."
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: integer
                      example: 1
                    role:
                      type: string
                      example: "Supervisor"
        400:
          description: "Pin no Introducido."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Por Favor, Introduzca una Clave de Aprobación"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        404:
          description: "Pin no Encontrado."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "El Pin Introducido no Existe"
        500:
          $ref: "#/components/responses/InternalError"

  /transactions_types/:
    get:
      summary: "Obtener la Lista de Todos los Tipos de Transacciones."
      description: "Muestra todos los Tipos de Transacciones Registrados."
      tags:
        - Transactions Types
      responses:
        200:
          description: "Tipos de Transacciones Obtenidos Exitosamente."
          content:
            application/json:
              schema:
                type: array
                items:
                  properties:
                    id:
                      type: integer
                      example: 1
                    transaction_type:
                      type: string
                      example: "Depósito"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /save-new-transaction-type/:
    post:
      summary: "Guardar un Nuevo Tipo de Transacción."
      description: "Registra un Nuevo Tipo de Transacción."
      tags:
        - Transactions Types
      parameters:
        - name: user_id
          in: header
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                transactionType:
                  type: string
                  example: "Nuevo Tipo de Transacción"
      responses:
        200:
          description: "Tipo de Transacción Registrado Exitosamente."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Nuevo Tipo de Transacción Registrado con Éxito"
        400:
          $ref: "#/components/responses/BadRequestErrorByEmptyFields"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        500:
          $ref: "#/components/responses/InternalError"
  /update-transaction-type/{id}/:
    put:
      summary: "Actualizar un Tipo de Transacción."
      description: "Actualiza un Tipo de Transacción."
      tags:
        - Transactions Types
      parameters:
        - name: user_id
          in: header
          required: true
          schema:
            type: integer
            example: 1
        - name: id
          in: path
          required: true
          description: "Id del Tipo de Transacción."
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                transactionType:
                  type: string
                  example: "Nuevo Nombre para Tipo de Transacción."
      responses:
        200:
          description: "Tipo de Transacción Actualizado Exitosamente."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Datos del Tipo de Transacción Actualizados con Éxito"
        400:
          $ref: "#/components/responses/BadRequestErrorByEmptyFields"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          $ref: "#/components/responses/ForbiddenError"
        409:
          description: "Tipo de Transacción Duplicado."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "El Nombre del Tipo de Transacción ya Está Registrado"
        500:
          $ref: "#/components/responses/InternalError"
  /delete-transaction-type/{id}/:
    delete:
      summary: "Eliminar los Datos de un Tipo de Transacción."
      description: "Actualiza el campo deleted_at de un Tipo de Transacción Específico Realizando así un Borrado Lógico."
      tags:
        - Transactions Types
      parameters:
        - name: user_id
          in: header
          required: true
          schema:
            type: integer
            example: 1
        - name: id
          in: path
          required: true
          description: "Id del Tipo de Transacción."
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: "Tipo de Transacción Eliminado Exitosamente."
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Tipo de Transacción Eliminado con Éxito"
        500:
          $ref: "#/components/responses/InternalError"

components:
  schemas:
    ErrorMessage:
      type: object
      properties:
        message:
          type: string
          example: Error Interno del Servidor

  responses:
    BadRequestError:
      description: Por Favor, Introduzca al Menos un Criterio de Búsqueda.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"

    BadRequestErrorByEmptyFields:
      description: Por Favor, Rellene Todos los Campos.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"

    UnauthorizedError:
      description: Token Expirado u Horario de Acceso Excedido.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"

    ForbiddenError:
      description: Token Expirado u Horario de Acceso Excedido.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"

    NotFoundError:
      description: No se Encontraron Resultados.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"

    InternalError:
      description: Error Interno del Servidor.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
